<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[// I should name the controller
function NotesListController($rootScope,$scope) {
	/* widget controller */
	var c = this;
	c.selectItem = function(idx) {
    // c.data.notes are data we accessed in server script
    // idx is value from ng-repeat
    var id = c.data.notes[idx].sys_id;

    // data should NOT be saved in $rootScope
    $rootScope.noteID = id;
    // Sending sys_id to another controller
    $rootScope.$broadcast('selectNote', id);

    // Receiving data back from noter body widget
    $scope.$on('noteBodyUpd', function(event,data) {
    // updating view values based on the data from notes body widget
    c.data.notes[idx].title = data.noteTitle; 
    c.data.notes[idx].note = data.noteBody;  
    c.server.update();     
    });
  }
}]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>notes_list</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Notes List</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
  //create an array to populate with notes
  // data.notes will be then accessible in client as well as HTML
  data.notes = [];

  var noteGR = new GlideRecord('x_snc_createnotes_note');
    noteGR.addQuery('user', gs.getUser().getID());
    //Sort the records by descending order based on the sys_created_on date field value
    noteGR.orderByDesc('sys_created_on');
    noteGR.query();

  while (noteGR.next()) {
    // create an object where we will save display values from $sp.getRecordDisplayValues()
    var noteObj = {};
    //use service portal helper method to get some display values
    // data object - noteObj -> display values are copied to this object
    // GlideRecord to work with -> noteGR
    // a comma-separated list of field names we need display values of
    $sp.getRecordDisplayValues(noteObj, noteGR, 'number,title,sys_id');
    //Create a variable under the noteObj, which holds the first 20 characters of the description
    //In the GlideRecord table, there can be up to 4000 characted under the note fields, hence slice is required
    noteObj.note = noteGR.getValue('note').slice(0,20);
    //push the populated obj into the array
    data.notes.push(noteObj);
  }
  })();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-01-14 13:51:50</sys_created_on>
        <sys_id>c8ec5d9e1bd200105e9ffc86cc4bcbfa</sys_id>
        <sys_mod_count>120</sys_mod_count>
        <sys_name>Notes List</sys_name>
        <sys_package display_value="CreateNotes" source="x_snc_createnotes">df5fd9a5090232007f44e1046c8ff69f</sys_package>
        <sys_policy/>
        <sys_scope display_value="CreateNotes">df5fd9a5090232007f44e1046c8ff69f</sys_scope>
        <sys_update_name>sp_widget_c8ec5d9e1bd200105e9ffc86cc4bcbfa</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-01-16 13:51:02</sys_updated_on>
        <template><![CDATA[<div class="panel panel-default">
    <div class="panel-heading clearfix">
      <h3 class="panel-title pull-left">
        ${Notes}
      </h3>
    </div>
    <div class="list-group">
      <a class="list-group-item" ng-click="c.selectItem($index)" ng-repeat="note in data.notes" >
        <h4 class="list-group-item-heading">
          {{note.title}} 
        </h4>
        <p class="list-group-item-text">
          {{note.note}}
        </p>
      </a>
    </div>
  </div>
  ]]></template>
    </sp_widget>
</record_update>
